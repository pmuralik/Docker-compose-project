
version: '3.7'

# Define services
services:
  # App backend service
  producer:
    # Configuration for building the docker image for the backend service
    build:
      context: Kotlin_producer_v2-master # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8086:8086" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - mysqldb # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://mysqldb:3306/test
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend

  # Frontend Service
  consumer:
    build:
      context: Kotlin_Consumer-master # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
    ports:
    - "8085:8085" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - mysqldb # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://mysqldb:3306/test
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend

  # Database Service (Mysql)
  mysqldb:
    image: mysql:5.7
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_DATABASE: test
      MYSQL_USER: murali
      MYSQL_PASSWORD: krishna
      MYSQL_ROOT_PASSWORD: password

    networks:
      - backend

# Networks to be created to facilitate communication between containers
networks:
  backend:
